/* Define the concept of natural number (nat). */

concept nat(x);

/* All Arabic numerals are nat. Arabic numerals are equivalent 
to the regular expression  ^(0|[1-9]\d*)$ .*/
/* Axiom 1: 0 is nat */

lets arabic_numeral "^(0|[1-9]\d*)$" : arabic_numeral is nat;

{
  0 is nat;
  3 is nat;
}

/* Axiom 2: If n is a natural number, then n++ is also a natural number. */

operator \++{a}: a is nat;
know if x: is_form(x, \++{a}) {x is nat};

{
  let x;
  \++{0} is nat;
  \++{x} is nat;  // Unknown: failed to check nat(x)
}

/* Axiom 3: 0 is not successor of any natural number. */
/* Axiom 4: Different natural numbers must have different successors. i.e.
if n, m are natural numbers and n != m, then n++ != m++. Equivalently, if 
n++ = m++, then we must have n = m */

concept commutative =(x,y): x is nat, y is nat;
operator \+{x,y}: x is nat, y is nat;

know if x: x is nat {not 0 = \++{x}  };
know if x,y: not x = y {
  not \++{x} = \++{y}
};

include "./litex_lib/natural_number.ts";

{
  0 = 4;  // false, by natural_number.addDefinition
  not 6 = 2;  // true, by natural_number.addDefinition
  let y: y is nat;
  \++{3} = 4; // true, by natural_number.plusplusEqualsPlusOne
  4 = \++{3}; // true, by natural_number.plusplusEqualsPlusOne
}

know if x: x is nat { \+{0,x} = x, \+{x,0} = x};

{
  $ 0 + 2 $ = 2;
  2 = $ 2 + 0 $;
}

know if x,y: x is nat, y is nat {$ x + y $ = $ y + x $};
know if x,y,z: x is nat, y is nat, z is nat { \+{\+{x,y},z} = \+{x, \+{y,z} } };
know if a,b,c: a is nat, b is nat, c is nat, $a + b $ = $ a + c$ {b = c};